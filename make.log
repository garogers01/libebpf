Making all in src
make[1]: Entering directory `/home/suchakra/Projects/repos/libebpf/src'
/bin/sh ../libtool  --tag=CC   --mode=compile gcc -DPACKAGE_NAME=\"libebpf\" -DPACKAGE_TARNAME=\"libebpf\" -DPACKAGE_VERSION=\"0.1\" -DPACKAGE_STRING=\"libebpf\ 0.1\" -DPACKAGE_BUGREPORT=\"suchakrapani.sharma@polymtl.ca\" -DPACKAGE_URL=\"\" -DPACKAGE=\"libebpf\" -DVERSION=\"0.1\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\".libs/\" -DHAVE_STDDEF_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_UNISTD_H=1 -DHAVE__BOOL=1 -DHAVE_STDLIB_H=1 -DHAVE_MALLOC=1 -DHAVE_GETPAGESIZE=1 -DHAVE_MEMSET=1 -I.  -I..  -g -fPIC -Wall -O3 -g -O2 -MT libebpf_la-bpf_jit_comp.lo -MD -MP -MF .deps/libebpf_la-bpf_jit_comp.Tpo -c -o libebpf_la-bpf_jit_comp.lo `test -f 'bpf_jit_comp.c' || echo './'`bpf_jit_comp.c
libtool: compile:  gcc -DPACKAGE_NAME=\"libebpf\" -DPACKAGE_TARNAME=\"libebpf\" -DPACKAGE_VERSION=\"0.1\" "-DPACKAGE_STRING=\"libebpf 0.1\"" -DPACKAGE_BUGREPORT=\"suchakrapani.sharma@polymtl.ca\" -DPACKAGE_URL=\"\" -DPACKAGE=\"libebpf\" -DVERSION=\"0.1\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\".libs/\" -DHAVE_STDDEF_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_UNISTD_H=1 -DHAVE__BOOL=1 -DHAVE_STDLIB_H=1 -DHAVE_MALLOC=1 -DHAVE_GETPAGESIZE=1 -DHAVE_MEMSET=1 -I. -I.. -g -fPIC -Wall -O3 -g -O2 -MT libebpf_la-bpf_jit_comp.lo -MD -MP -MF .deps/libebpf_la-bpf_jit_comp.Tpo -c bpf_jit_comp.c  -fPIC -DPIC -o .libs/libebpf_la-bpf_jit_comp.o
In file included from bpf_jit_comp.c:26:0:
../include/bpf.h:52:36: warning: 'struct fd' declared inside parameter list [enabled by default]
 struct bpf_map *bpf_map_get(struct fd f);
                                    ^
../include/bpf.h:52:36: warning: its scope is only this definition or declaration, which is probably not what you want [enabled by default]
In file included from bpf_jit_comp.c:27:0:
../include/filter.h:330:26: warning: 'struct sk_buff' declared inside parameter list [enabled by default]
             const struct bpf_insn *filter);
                          ^
../include/filter.h:374:39: warning: 'struct sk_buff' declared inside parameter list [enabled by default]
 int sk_filter(struct sock *sk, struct sk_buff *skb);
                                       ^
../include/filter.h:374:39: warning: 'struct sock' declared inside parameter list [enabled by default]
../include/filter.h:395:55: warning: 'struct sock' declared inside parameter list [enabled by default]
 int sk_attach_filter(struct sock_fprog *fprog, struct sock *sk);
                                                       ^
../include/filter.h:396:45: warning: 'struct sock' declared inside parameter list [enabled by default]
 int sk_attach_filter_ebpf(__u32 ufd, struct sock *sk);
                                             ^
../include/filter.h:397:29: warning: 'struct sock' declared inside parameter list [enabled by default]
 int sk_detach_filter(struct sock *sk);
                             ^
../include/filter.h:401:9: warning: 'struct sock' declared inside parameter list [enabled by default]
         unsigned int len);
         ^
../include/filter.h:403:48: warning: 'struct sock' declared inside parameter list [enabled by default]
 _Bool sk_filter_charge(struct sock *sk, struct sk_filter *fp);
                                                ^
../include/filter.h:404:49: warning: 'struct sock' declared inside parameter list [enabled by default]
 void sk_filter_uncharge(struct sock *sk, struct sk_filter *fp);
                                                 ^
bpf_jit_comp.c:42:42: error: unknown type name 'u32'
 static inline __u8 *emit_code(__u8 *ptr, u32 bytes, unsigned int len)
                                          ^
bpf_jit_comp.c:70:1: error: unknown type name 'bool'
 static inline bool is_imm8(int value)
 ^
bpf_jit_comp.c:75:1: error: unknown type name 'bool'
 static inline bool is_simm32(s64 value)
 ^
bpf_jit_comp.c:75:30: error: unknown type name 's64'
 static inline bool is_simm32(s64 value)
                              ^
bpf_jit_comp.c: In function 'bpf_flush_icache':
bpf_jit_comp.c:114:5: error: unknown type name 'mm_segment_t'
     mm_segment_t old_fs = get_fs();
     ^
bpf_jit_comp.c:114:5: warning: implicit declaration of function 'get_fs' [-Wimplicit-function-declaration]
bpf_jit_comp.c:116:5: warning: implicit declaration of function 'set_fs' [-Wimplicit-function-declaration]
     set_fs(KERNEL_DS);
     ^
bpf_jit_comp.c:116:12: error: 'KERNEL_DS' undeclared (first use in this function)
     set_fs(KERNEL_DS);
            ^
bpf_jit_comp.c:116:12: note: each undeclared identifier is reported only once for each function it appears in
bpf_jit_comp.c:117:5: warning: implicit declaration of function 'smp_wmb' [-Wimplicit-function-declaration]
     smp_wmb();
     ^
bpf_jit_comp.c:118:5: warning: implicit declaration of function 'flush_icache_range' [-Wimplicit-function-declaration]
     flush_icache_range((unsigned long)start, (unsigned long)end);
     ^
bpf_jit_comp.c: At top level:
bpf_jit_comp.c:151:1: error: unknown type name 'bool'
 static inline bool is_ereg(u32 reg)
 ^
bpf_jit_comp.c:151:28: error: unknown type name 'u32'
 static inline bool is_ereg(u32 reg)
                            ^
bpf_jit_comp.c:161:40: error: unknown type name 'u32'
 static inline __u8 add_1mod(__u8 byte, u32 reg)
                                        ^
bpf_jit_comp.c:168:40: error: unknown type name 'u32'
 static inline __u8 add_2mod(__u8 byte, u32 r1, u32 r2)
                                        ^
bpf_jit_comp.c:168:48: error: unknown type name 'u32'
 static inline __u8 add_2mod(__u8 byte, u32 r1, u32 r2)
                                                ^
bpf_jit_comp.c:178:40: error: unknown type name 'u32'
 static inline __u8 add_1reg(__u8 byte, u32 dst_reg)
                                        ^
bpf_jit_comp.c:184:40: error: unknown type name 'u32'
 static inline __u8 add_2reg(__u8 byte, u32 dst_reg, u32 src_reg)
                                        ^
bpf_jit_comp.c:184:53: error: unknown type name 'u32'
 static inline __u8 add_2reg(__u8 byte, u32 dst_reg, u32 src_reg)
                                                     ^
bpf_jit_comp.c:197:5: error: unknown type name 'bool'
     bool seen_ld_abs;
     ^
bpf_jit_comp.c: In function 'do_jit':
bpf_jit_comp.c:213:5: warning: implicit declaration of function 'emit_code' [-Wimplicit-function-declaration]
     EMIT1(0x55); /* push rbp */
     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:213:5: note: in expansion of macro 'EMIT1'
     EMIT1(0x55); /* push rbp */
     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:214:5: note: in expansion of macro 'EMIT3'
     EMIT3(0x48, 0x89, 0xE5); /* mov rbp,rsp */
     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:217:5: note: in expansion of macro 'EMIT3_off32'
     EMIT3_off32(0x48, 0x81, 0xEC, stacksize);
     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:66:28: note: in expansion of macro 'EMIT'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
                            ^
bpf_jit_comp.c:217:5: note: in expansion of macro 'EMIT3_off32'
     EMIT3_off32(0x48, 0x81, 0xEC, stacksize);
     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:222:5: note: in expansion of macro 'EMIT3_off32'
     EMIT3_off32(0x48, 0x89, 0x9D, -stacksize);
     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:66:28: note: in expansion of macro 'EMIT'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
                            ^
bpf_jit_comp.c:222:5: note: in expansion of macro 'EMIT3_off32'
     EMIT3_off32(0x48, 0x89, 0x9D, -stacksize);
     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:233:5: note: in expansion of macro 'EMIT3_off32'
     EMIT3_off32(0x4C, 0x89, 0xAD, -stacksize + 8);
     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:66:28: note: in expansion of macro 'EMIT'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
                            ^
bpf_jit_comp.c:233:5: note: in expansion of macro 'EMIT3_off32'
     EMIT3_off32(0x4C, 0x89, 0xAD, -stacksize + 8);
     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:235:5: note: in expansion of macro 'EMIT3_off32'
     EMIT3_off32(0x4C, 0x89, 0xB5, -stacksize + 16);
     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:66:28: note: in expansion of macro 'EMIT'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
                            ^
bpf_jit_comp.c:235:5: note: in expansion of macro 'EMIT3_off32'
     EMIT3_off32(0x4C, 0x89, 0xB5, -stacksize + 16);
     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:237:5: note: in expansion of macro 'EMIT3_off32'
     EMIT3_off32(0x4C, 0x89, 0xBD, -stacksize + 24);
     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:66:28: note: in expansion of macro 'EMIT'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
                            ^
bpf_jit_comp.c:237:5: note: in expansion of macro 'EMIT3_off32'
     EMIT3_off32(0x4C, 0x89, 0xBD, -stacksize + 24);
     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:240:5: note: in expansion of macro 'EMIT2'
     EMIT2(0x31, 0xc0); /* xor eax, eax */
     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:241:5: note: in expansion of macro 'EMIT3'
     EMIT3(0x4D, 0x31, 0xED); /* xor r13, r13 */
     ^
In file included from ../include/filter.h:8:0,
                 from bpf_jit_comp.c:27:
bpf_jit_comp.c:247:37: error: invalid use of undefined type 'struct sk_buff'
         if (is_imm8(offsetof(struct sk_buff, len)))
                                     ^
bpf_jit_comp.c:250:37: error: invalid use of undefined type 'struct sk_buff'
                     offsetof(struct sk_buff, len));
                                     ^
bpf_jit_comp.c:55:54: note: in definition of macro 'EMIT'
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                                      ^
bpf_jit_comp.c:249:13: note: in expansion of macro 'EMIT4'
             EMIT4(0x44, 0x8b, 0x4f,
             ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:253:13: note: in expansion of macro 'EMIT3_off32'
             EMIT3_off32(0x44, 0x8b, 0x8f,
             ^
bpf_jit_comp.c:254:37: error: invalid use of undefined type 'struct sk_buff'
                     offsetof(struct sk_buff, len));
                                     ^
bpf_jit_comp.c:55:54: note: in definition of macro 'EMIT'
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                                      ^
bpf_jit_comp.c:253:13: note: in expansion of macro 'EMIT3_off32'
             EMIT3_off32(0x44, 0x8b, 0x8f,
             ^
In file included from ../include/filter.h:8:0,
                 from bpf_jit_comp.c:27:
bpf_jit_comp.c:256:37: error: invalid use of undefined type 'struct sk_buff'
         if (is_imm8(offsetof(struct sk_buff, data_len)))
                                     ^
bpf_jit_comp.c:259:37: error: invalid use of undefined type 'struct sk_buff'
                     offsetof(struct sk_buff, data_len));
                                     ^
bpf_jit_comp.c:55:54: note: in definition of macro 'EMIT'
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                                      ^
bpf_jit_comp.c:258:13: note: in expansion of macro 'EMIT4'
             EMIT4(0x44, 0x2b, 0x4f,
             ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:261:13: note: in expansion of macro 'EMIT3_off32'
             EMIT3_off32(0x44, 0x2b, 0x8f,
             ^
bpf_jit_comp.c:262:37: error: invalid use of undefined type 'struct sk_buff'
                     offsetof(struct sk_buff, data_len));
                                     ^
bpf_jit_comp.c:55:54: note: in definition of macro 'EMIT'
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                                      ^
bpf_jit_comp.c:261:13: note: in expansion of macro 'EMIT3_off32'
             EMIT3_off32(0x44, 0x2b, 0x8f,
             ^
In file included from ../include/filter.h:8:0,
                 from bpf_jit_comp.c:27:
bpf_jit_comp.c:264:37: error: invalid use of undefined type 'struct sk_buff'
         if (is_imm8(offsetof(struct sk_buff, data)))
                                     ^
bpf_jit_comp.c:267:37: error: invalid use of undefined type 'struct sk_buff'
                     offsetof(struct sk_buff, data));
                                     ^
bpf_jit_comp.c:55:54: note: in definition of macro 'EMIT'
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                                      ^
bpf_jit_comp.c:266:13: note: in expansion of macro 'EMIT4'
             EMIT4(0x4c, 0x8b, 0x57,
             ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:270:13: note: in expansion of macro 'EMIT3_off32'
             EMIT3_off32(0x4c, 0x8b, 0x97,
             ^
bpf_jit_comp.c:271:37: error: invalid use of undefined type 'struct sk_buff'
                     offsetof(struct sk_buff, data));
                                     ^
bpf_jit_comp.c:55:54: note: in definition of macro 'EMIT'
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                                      ^
bpf_jit_comp.c:270:13: note: in expansion of macro 'EMIT3_off32'
             EMIT3_off32(0x4c, 0x8b, 0x97,
             ^
bpf_jit_comp.c:275:9: error: unknown type name 's32'
         const s32 imm32 = insn->imm;
         ^
bpf_jit_comp.c:276:9: error: unknown type name 'u32'
         u32 dst_reg = insn->dst_reg;
         ^
bpf_jit_comp.c:277:9: error: unknown type name 'u32'
         u32 src_reg = insn->src_reg;
         ^
bpf_jit_comp.c:279:9: error: unknown type name 's64'
         s64 jmp_offset;
         ^
bpf_jit_comp.c:304:21: warning: implicit declaration of function 'add_2mod' [-Wimplicit-function-declaration]
                     EMIT1(add_2mod(0x48, dst_reg, src_reg));
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:304:21: note: in expansion of macro 'EMIT1'
                     EMIT1(add_2mod(0x48, dst_reg, src_reg));
                     ^
bpf_jit_comp.c:305:17: warning: implicit declaration of function 'is_ereg' [-Wimplicit-function-declaration]
                 else if (is_ereg(dst_reg) || is_ereg(src_reg))
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:306:21: note: in expansion of macro 'EMIT1'
                     EMIT1(add_2mod(0x40, dst_reg, src_reg));
                     ^
bpf_jit_comp.c:307:17: warning: implicit declaration of function 'add_2reg' [-Wimplicit-function-declaration]
                 EMIT2(b2, add_2reg(0xC0, dst_reg, src_reg));
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:307:17: note: in expansion of macro 'EMIT2'
                 EMIT2(b2, add_2reg(0xC0, dst_reg, src_reg));
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:83:9: note: in expansion of macro 'EMIT3'
         EMIT3(add_2mod(0x48, DST, SRC), 0x89, add_2reg(0xC0, DST, SRC)); \
         ^
bpf_jit_comp.c:312:17: note: in expansion of macro 'EMIT_mov'
                 EMIT_mov(dst_reg, src_reg);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:318:21: note: in expansion of macro 'EMIT1'
                     EMIT1(add_2mod(0x40, dst_reg, src_reg));
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:319:17: note: in expansion of macro 'EMIT2'
                 EMIT2(0x89, add_2reg(0xC0, dst_reg, src_reg));
                 ^
bpf_jit_comp.c:326:21: warning: implicit declaration of function 'add_1mod' [-Wimplicit-function-declaration]
                     EMIT1(add_1mod(0x48, dst_reg));
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:326:21: note: in expansion of macro 'EMIT1'
                     EMIT1(add_1mod(0x48, dst_reg));
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:328:21: note: in expansion of macro 'EMIT1'
                     EMIT1(add_1mod(0x40, dst_reg));
                     ^
bpf_jit_comp.c:329:17: warning: implicit declaration of function 'add_1reg' [-Wimplicit-function-declaration]
                 EMIT2(0xF7, add_1reg(0xD8, dst_reg));
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:329:17: note: in expansion of macro 'EMIT2'
                 EMIT2(0xF7, add_1reg(0xD8, dst_reg));
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:343:21: note: in expansion of macro 'EMIT1'
                     EMIT1(add_1mod(0x48, dst_reg));
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:345:21: note: in expansion of macro 'EMIT1'
                     EMIT1(add_1mod(0x40, dst_reg));
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:356:21: note: in expansion of macro 'EMIT3'
                     EMIT3(0x83, add_1reg(b3, dst_reg), imm32);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:64:9: note: in expansion of macro 'EMIT2'
     do {EMIT2(b1, b2); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:358:21: note: in expansion of macro 'EMIT2_off32'
                     EMIT2_off32(0x81, add_1reg(b3, dst_reg), imm32);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:64:24: note: in expansion of macro 'EMIT'
     do {EMIT2(b1, b2); EMIT(off, 4); } while (0)
                        ^
bpf_jit_comp.c:358:21: note: in expansion of macro 'EMIT2_off32'
                     EMIT2_off32(0x81, add_1reg(b3, dst_reg), imm32);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:371:21: note: in expansion of macro 'EMIT3_off32'
                     EMIT3_off32(b1, b2, add_1reg(b3, dst_reg), imm32);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:66:28: note: in expansion of macro 'EMIT'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
                            ^
bpf_jit_comp.c:371:21: note: in expansion of macro 'EMIT3_off32'
                     EMIT3_off32(b1, b2, add_1reg(b3, dst_reg), imm32);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:378:21: note: in expansion of macro 'EMIT1'
                     EMIT1(add_1mod(0x40, dst_reg));
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:62:9: note: in expansion of macro 'EMIT1'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:379:17: note: in expansion of macro 'EMIT1_off32'
                 EMIT1_off32(add_1reg(0xB8, dst_reg), imm32);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:62:20: note: in expansion of macro 'EMIT'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
                    ^
bpf_jit_comp.c:379:17: note: in expansion of macro 'EMIT1_off32'
                 EMIT1_off32(add_1reg(0xB8, dst_reg), imm32);
                 ^
bpf_jit_comp.c:386:21: warning: implicit declaration of function 'pr_err' [-Wimplicit-function-declaration]
                     pr_err("invalid BPF_LD_IMM64 insn\n");
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:391:17: note: in expansion of macro 'EMIT2'
                 EMIT2(add_1mod(0x48, dst_reg), add_1reg(0xB8, dst_reg));
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:392:17: note: in expansion of macro 'EMIT'
                 EMIT(insn[0].imm, 4);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:393:17: note: in expansion of macro 'EMIT'
                 EMIT(insn[1].imm, 4);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:408:17: note: in expansion of macro 'EMIT1'
                 EMIT1(0x50); /* push rax */
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:409:17: note: in expansion of macro 'EMIT1'
                 EMIT1(0x52); /* push rdx */
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:83:9: note: in expansion of macro 'EMIT3'
         EMIT3(add_2mod(0x48, DST, SRC), 0x89, add_2reg(0xC0, DST, SRC)); \
         ^
bpf_jit_comp.c:413:21: note: in expansion of macro 'EMIT_mov'
                     EMIT_mov(AUX_REG, src_reg);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:416:21: note: in expansion of macro 'EMIT3_off32'
                     EMIT3_off32(0x49, 0xC7, 0xC3, imm32);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:66:28: note: in expansion of macro 'EMIT'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
                            ^
bpf_jit_comp.c:416:21: note: in expansion of macro 'EMIT3_off32'
                     EMIT3_off32(0x49, 0xC7, 0xC3, imm32);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:83:9: note: in expansion of macro 'EMIT3'
         EMIT3(add_2mod(0x48, DST, SRC), 0x89, add_2reg(0xC0, DST, SRC)); \
         ^
bpf_jit_comp.c:419:17: note: in expansion of macro 'EMIT_mov'
                 EMIT_mov(BPF_REG_0, dst_reg);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:424:17: note: in expansion of macro 'EMIT2'
                 EMIT2(0x31, 0xd2);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:60:33: note: in expansion of macro 'EMIT'
 #define EMIT4(b1, b2, b3, b4)   EMIT((b1) + ((b2) << 8) + ((b3) << 16) + ((b4) << 24), 4)
                                 ^
bpf_jit_comp.c:430:21: note: in expansion of macro 'EMIT4'
                     EMIT4(0x49, 0x83, 0xFB, 0x00);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:433:21: note: in expansion of macro 'EMIT2'
                     EMIT2(X86_JNE, 1 + 1 + 2 + 5);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:434:21: note: in expansion of macro 'EMIT1'
                     EMIT1(0x5A); /* pop rdx */
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:435:21: note: in expansion of macro 'EMIT1'
                     EMIT1(0x58); /* pop rax */
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:436:21: note: in expansion of macro 'EMIT2'
                     EMIT2(0x31, 0xc0); /* xor eax, eax */
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:62:9: note: in expansion of macro 'EMIT1'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:443:21: note: in expansion of macro 'EMIT1_off32'
                     EMIT1_off32(0xE9, jmp_offset);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:62:20: note: in expansion of macro 'EMIT'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
                    ^
bpf_jit_comp.c:443:21: note: in expansion of macro 'EMIT1_off32'
                     EMIT1_off32(0xE9, jmp_offset);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:448:21: note: in expansion of macro 'EMIT3'
                     EMIT3(0x49, 0xF7, 0xF3);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:451:21: note: in expansion of macro 'EMIT3'
                     EMIT3(0x41, 0xF7, 0xF3);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:455:21: note: in expansion of macro 'EMIT3'
                     EMIT3(0x49, 0x89, 0xD3);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:458:21: note: in expansion of macro 'EMIT3'
                     EMIT3(0x49, 0x89, 0xC3);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:460:17: note: in expansion of macro 'EMIT1'
                 EMIT1(0x5A); /* pop rdx */
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:461:17: note: in expansion of macro 'EMIT1'
                 EMIT1(0x58); /* pop rax */
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:83:9: note: in expansion of macro 'EMIT3'
         EMIT3(add_2mod(0x48, DST, SRC), 0x89, add_2reg(0xC0, DST, SRC)); \
         ^
bpf_jit_comp.c:464:17: note: in expansion of macro 'EMIT_mov'
                 EMIT_mov(dst_reg, AUX_REG);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:471:17: note: in expansion of macro 'EMIT1'
                 EMIT1(0x50); /* push rax */
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:472:17: note: in expansion of macro 'EMIT1'
                 EMIT1(0x52); /* push rdx */
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:83:9: note: in expansion of macro 'EMIT3'
         EMIT3(add_2mod(0x48, DST, SRC), 0x89, add_2reg(0xC0, DST, SRC)); \
         ^
bpf_jit_comp.c:475:17: note: in expansion of macro 'EMIT_mov'
                 EMIT_mov(AUX_REG, dst_reg);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:83:9: note: in expansion of macro 'EMIT3'
         EMIT3(add_2mod(0x48, DST, SRC), 0x89, add_2reg(0xC0, DST, SRC)); \
         ^
bpf_jit_comp.c:479:21: note: in expansion of macro 'EMIT_mov'
                     EMIT_mov(BPF_REG_0, src_reg);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:482:21: note: in expansion of macro 'EMIT3_off32'
                     EMIT3_off32(0x48, 0xC7, 0xC0, imm32);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:66:28: note: in expansion of macro 'EMIT'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
                            ^
bpf_jit_comp.c:482:21: note: in expansion of macro 'EMIT3_off32'
                     EMIT3_off32(0x48, 0xC7, 0xC0, imm32);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:485:21: note: in expansion of macro 'EMIT1'
                     EMIT1(add_1mod(0x48, AUX_REG));
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:487:21: note: in expansion of macro 'EMIT1'
                     EMIT1(add_1mod(0x40, AUX_REG));
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:489:17: note: in expansion of macro 'EMIT2'
                 EMIT2(0xF7, add_1reg(0xE0, AUX_REG));
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:83:9: note: in expansion of macro 'EMIT3'
         EMIT3(add_2mod(0x48, DST, SRC), 0x89, add_2reg(0xC0, DST, SRC)); \
         ^
bpf_jit_comp.c:492:17: note: in expansion of macro 'EMIT_mov'
                 EMIT_mov(AUX_REG, BPF_REG_0);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:494:17: note: in expansion of macro 'EMIT1'
                 EMIT1(0x5A); /* pop rdx */
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:495:17: note: in expansion of macro 'EMIT1'
                 EMIT1(0x58); /* pop rax */
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:83:9: note: in expansion of macro 'EMIT3'
         EMIT3(add_2mod(0x48, DST, SRC), 0x89, add_2reg(0xC0, DST, SRC)); \
         ^
bpf_jit_comp.c:498:17: note: in expansion of macro 'EMIT_mov'
                 EMIT_mov(dst_reg, AUX_REG);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:509:21: note: in expansion of macro 'EMIT1'
                     EMIT1(add_1mod(0x48, dst_reg));
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:511:21: note: in expansion of macro 'EMIT1'
                     EMIT1(add_1mod(0x40, dst_reg));
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:518:17: note: in expansion of macro 'EMIT3'
                 EMIT3(0xC1, add_1reg(b3, dst_reg), imm32);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:83:9: note: in expansion of macro 'EMIT3'
         EMIT3(add_2mod(0x48, DST, SRC), 0x89, add_2reg(0xC0, DST, SRC)); \
         ^
bpf_jit_comp.c:531:21: note: in expansion of macro 'EMIT_mov'
                     EMIT_mov(AUX_REG, dst_reg);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:536:21: note: in expansion of macro 'EMIT1'
                     EMIT1(0x51); /* push rcx */
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:83:9: note: in expansion of macro 'EMIT3'
         EMIT3(add_2mod(0x48, DST, SRC), 0x89, add_2reg(0xC0, DST, SRC)); \
         ^
bpf_jit_comp.c:539:21: note: in expansion of macro 'EMIT_mov'
                     EMIT_mov(BPF_REG_4, src_reg);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:544:21: note: in expansion of macro 'EMIT1'
                     EMIT1(add_1mod(0x48, dst_reg));
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:546:21: note: in expansion of macro 'EMIT1'
                     EMIT1(add_1mod(0x40, dst_reg));
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:553:17: note: in expansion of macro 'EMIT2'
                 EMIT2(0xD3, add_1reg(b3, dst_reg));
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:556:21: note: in expansion of macro 'EMIT1'
                     EMIT1(0x59); /* pop rcx */
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:83:9: note: in expansion of macro 'EMIT3'
         EMIT3(add_2mod(0x48, DST, SRC), 0x89, add_2reg(0xC0, DST, SRC)); \
         ^
bpf_jit_comp.c:560:21: note: in expansion of macro 'EMIT_mov'
                     EMIT_mov(insn->dst_reg, AUX_REG);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:567:25: note: in expansion of macro 'EMIT1'
                         EMIT1(0x66);
                         ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:569:29: note: in expansion of macro 'EMIT1'
                             EMIT1(0x41);
                             ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:570:25: note: in expansion of macro 'EMIT3'
                         EMIT3(0xC1, add_1reg(0xC8, dst_reg), 8);
                         ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:575:29: note: in expansion of macro 'EMIT2'
                             EMIT2(0x41, 0x0F);
                             ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:577:29: note: in expansion of macro 'EMIT1'
                             EMIT1(0x0F);
                             ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:578:25: note: in expansion of macro 'EMIT1'
                         EMIT1(add_1reg(0xC8, dst_reg));
                         ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:582:25: note: in expansion of macro 'EMIT3'
                         EMIT3(add_1mod(0x48, dst_reg), 0x0F,
                         ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:594:21: note: in expansion of macro 'EMIT2'
                     EMIT2(0x41, 0xC6);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:596:21: note: in expansion of macro 'EMIT1'
                     EMIT1(0xC6);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:600:21: note: in expansion of macro 'EMIT3'
                     EMIT3(0x66, 0x41, 0xC7);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:602:21: note: in expansion of macro 'EMIT2'
                     EMIT2(0x66, 0xC7);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:606:21: note: in expansion of macro 'EMIT2'
                     EMIT2(0x41, 0xC7);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:608:21: note: in expansion of macro 'EMIT1'
                     EMIT1(0xC7);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:611:17: note: in expansion of macro 'EMIT2'
                 EMIT2(add_1mod(0x48, dst_reg), 0xC7);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:614:17: note: in expansion of macro 'EMIT2'
                 EMIT2(add_1reg(0x40, dst_reg), insn->off);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:62:9: note: in expansion of macro 'EMIT1'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:616:21: note: in expansion of macro 'EMIT1_off32'
                     EMIT1_off32(add_1reg(0x80, dst_reg), insn->off);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:62:20: note: in expansion of macro 'EMIT'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
                    ^
bpf_jit_comp.c:616:21: note: in expansion of macro 'EMIT1_off32'
                     EMIT1_off32(add_1reg(0x80, dst_reg), insn->off);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:618:17: note: in expansion of macro 'EMIT'
                 EMIT(imm32, bpf_size_to_x86_bytes(BPF_SIZE(insn->code)));
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:627:21: note: in expansion of macro 'EMIT2'
                     EMIT2(add_2mod(0x40, dst_reg, src_reg), 0x88);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:629:21: note: in expansion of macro 'EMIT1'
                     EMIT1(0x88);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:633:21: note: in expansion of macro 'EMIT3'
                     EMIT3(0x66, add_2mod(0x40, dst_reg, src_reg), 0x89);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:635:21: note: in expansion of macro 'EMIT2'
                     EMIT2(0x66, 0x89);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:639:21: note: in expansion of macro 'EMIT2'
                     EMIT2(add_2mod(0x40, dst_reg, src_reg), 0x89);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:641:21: note: in expansion of macro 'EMIT1'
                     EMIT1(0x89);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:644:17: note: in expansion of macro 'EMIT2'
                 EMIT2(add_2mod(0x48, dst_reg, src_reg), 0x89);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:646:21: note: in expansion of macro 'EMIT2'
                     EMIT2(add_2reg(0x40, dst_reg, src_reg), insn->off);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:62:9: note: in expansion of macro 'EMIT1'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:648:21: note: in expansion of macro 'EMIT1_off32'
                     EMIT1_off32(add_2reg(0x80, dst_reg, src_reg),
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:62:20: note: in expansion of macro 'EMIT'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
                    ^
bpf_jit_comp.c:648:21: note: in expansion of macro 'EMIT1_off32'
                     EMIT1_off32(add_2reg(0x80, dst_reg, src_reg),
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:655:17: note: in expansion of macro 'EMIT3'
                 EMIT3(add_2mod(0x48, src_reg, dst_reg), 0x0F, 0xB6);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:659:17: note: in expansion of macro 'EMIT3'
                 EMIT3(add_2mod(0x48, src_reg, dst_reg), 0x0F, 0xB7);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:664:21: note: in expansion of macro 'EMIT2'
                     EMIT2(add_2mod(0x40, src_reg, dst_reg), 0x8B);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:666:21: note: in expansion of macro 'EMIT1'
                     EMIT1(0x8B);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:670:17: note: in expansion of macro 'EMIT2'
                 EMIT2(add_2mod(0x48, src_reg, dst_reg), 0x8B);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:676:21: note: in expansion of macro 'EMIT2'
                     EMIT2(add_2reg(0x40, src_reg, dst_reg), insn->off);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:62:9: note: in expansion of macro 'EMIT1'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:678:21: note: in expansion of macro 'EMIT1_off32'
                     EMIT1_off32(add_2reg(0x80, src_reg, dst_reg),
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:62:20: note: in expansion of macro 'EMIT'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
                    ^
bpf_jit_comp.c:678:21: note: in expansion of macro 'EMIT1_off32'
                     EMIT1_off32(add_2reg(0x80, src_reg, dst_reg),
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:686:21: note: in expansion of macro 'EMIT3'
                     EMIT3(0xF0, add_2mod(0x40, dst_reg, src_reg), 0x01);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:688:21: note: in expansion of macro 'EMIT2'
                     EMIT2(0xF0, 0x01);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:691:17: note: in expansion of macro 'EMIT3'
                 EMIT3(0xF0, add_2mod(0x48, dst_reg, src_reg), 0x01);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:693:21: note: in expansion of macro 'EMIT2'
                     EMIT2(add_2reg(0x40, dst_reg, src_reg), insn->off);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:62:9: note: in expansion of macro 'EMIT1'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:695:21: note: in expansion of macro 'EMIT1_off32'
                     EMIT1_off32(add_2reg(0x80, dst_reg, src_reg),
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:62:20: note: in expansion of macro 'EMIT'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
                    ^
bpf_jit_comp.c:695:21: note: in expansion of macro 'EMIT1_off32'
                     EMIT1_off32(add_2reg(0x80, dst_reg, src_reg),
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:704:21: note: in expansion of macro 'EMIT2'
                     EMIT2(0x41, 0x52); /* push %r10 */
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:705:21: note: in expansion of macro 'EMIT2'
                     EMIT2(0x41, 0x51); /* push %r9 */
                     ^
bpf_jit_comp.c:711:17: warning: implicit declaration of function 'is_simm32' [-Wimplicit-function-declaration]
                 if (!imm32 || !is_simm32(jmp_offset)) {
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:62:9: note: in expansion of macro 'EMIT1'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:716:17: note: in expansion of macro 'EMIT1_off32'
                 EMIT1_off32(0xE8, jmp_offset);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:62:20: note: in expansion of macro 'EMIT'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
                    ^
bpf_jit_comp.c:716:17: note: in expansion of macro 'EMIT1_off32'
                 EMIT1_off32(0xE8, jmp_offset);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:718:21: note: in expansion of macro 'EMIT2'
                     EMIT2(0x41, 0x59); /* pop %r9 */
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:719:21: note: in expansion of macro 'EMIT2'
                     EMIT2(0x41, 0x5A); /* pop %r10 */
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:731:17: note: in expansion of macro 'EMIT3'
                 EMIT3(add_2mod(0x48, dst_reg, src_reg), 0x39,
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:737:17: note: in expansion of macro 'EMIT3'
                 EMIT3(add_2mod(0x48, dst_reg, src_reg), 0x85,
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:743:17: note: in expansion of macro 'EMIT1'
                 EMIT1(add_1mod(0x48, dst_reg));
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:64:9: note: in expansion of macro 'EMIT2'
     do {EMIT2(b1, b2); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:744:17: note: in expansion of macro 'EMIT2_off32'
                 EMIT2_off32(0xF7, add_1reg(0xC0, dst_reg), imm32);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:64:24: note: in expansion of macro 'EMIT'
     do {EMIT2(b1, b2); EMIT(off, 4); } while (0)
                        ^
bpf_jit_comp.c:744:17: note: in expansion of macro 'EMIT2_off32'
                 EMIT2_off32(0xF7, add_1reg(0xC0, dst_reg), imm32);
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:754:17: note: in expansion of macro 'EMIT1'
                 EMIT1(add_1mod(0x48, dst_reg));
                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:757:21: note: in expansion of macro 'EMIT3'
                     EMIT3(0x83, add_1reg(0xF8, dst_reg), imm32);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:64:9: note: in expansion of macro 'EMIT2'
     do {EMIT2(b1, b2); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:759:21: note: in expansion of macro 'EMIT2_off32'
                     EMIT2_off32(0x81, add_1reg(0xF8, dst_reg), imm32);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:64:24: note: in expansion of macro 'EMIT'
     do {EMIT2(b1, b2); EMIT(off, 4); } while (0)
                        ^
bpf_jit_comp.c:759:21: note: in expansion of macro 'EMIT2_off32'
                     EMIT2_off32(0x81, add_1reg(0xF8, dst_reg), imm32);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:791:21: note: in expansion of macro 'EMIT2'
                     EMIT2(jmp_cond, jmp_offset);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:64:9: note: in expansion of macro 'EMIT2'
     do {EMIT2(b1, b2); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:793:21: note: in expansion of macro 'EMIT2_off32'
                     EMIT2_off32(0x0F, jmp_cond + 0x10, jmp_offset);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:64:24: note: in expansion of macro 'EMIT'
     do {EMIT2(b1, b2); EMIT(off, 4); } while (0)
                        ^
bpf_jit_comp.c:793:21: note: in expansion of macro 'EMIT2_off32'
                     EMIT2_off32(0x0F, jmp_cond + 0x10, jmp_offset);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:808:21: note: in expansion of macro 'EMIT2'
                     EMIT2(0xEB, jmp_offset);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:62:9: note: in expansion of macro 'EMIT1'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:810:21: note: in expansion of macro 'EMIT1_off32'
                     EMIT1_off32(0xE9, jmp_offset);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:62:20: note: in expansion of macro 'EMIT'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
                    ^
bpf_jit_comp.c:810:21: note: in expansion of macro 'EMIT1_off32'
                     EMIT1_off32(0xE9, jmp_offset);
                     ^
bpf_jit_comp.c:822:34: error: 'true' undeclared (first use in this function)
 common_load:  ctx->seen_ld_abs = true;
                                  ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:62:9: note: in expansion of macro 'EMIT1'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:831:25: note: in expansion of macro 'EMIT1_off32'
                         EMIT1_off32(0xBE, imm32);
                         ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:62:20: note: in expansion of macro 'EMIT'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
                    ^
bpf_jit_comp.c:831:25: note: in expansion of macro 'EMIT1_off32'
                         EMIT1_off32(0xBE, imm32);
                         ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:83:9: note: in expansion of macro 'EMIT3'
         EMIT3(add_2mod(0x48, DST, SRC), 0x89, add_2reg(0xC0, DST, SRC)); \
         ^
bpf_jit_comp.c:834:25: note: in expansion of macro 'EMIT_mov'
                         EMIT_mov(BPF_REG_2, src_reg);
                         ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:838:33: note: in expansion of macro 'EMIT3'
                                 EMIT3(0x83, 0xC6, imm32);
                                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:58:24: note: in expansion of macro 'EMIT'
 #define EMIT2(b1, b2)  EMIT((b1) + ((b2) << 8), 2)
                        ^
bpf_jit_comp.c:64:9: note: in expansion of macro 'EMIT2'
     do {EMIT2(b1, b2); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:841:33: note: in expansion of macro 'EMIT2_off32'
                                 EMIT2_off32(0x81, 0xC6, imm32);
                                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:64:24: note: in expansion of macro 'EMIT'
     do {EMIT2(b1, b2); EMIT(off, 4); } while (0)
                        ^
bpf_jit_comp.c:841:33: note: in expansion of macro 'EMIT2_off32'
                                 EMIT2_off32(0x81, 0xC6, imm32);
                                 ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:62:9: note: in expansion of macro 'EMIT1'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:849:21: note: in expansion of macro 'EMIT1_off32'
                     EMIT1_off32(0xE8, jmp_offset); /* call */
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:62:20: note: in expansion of macro 'EMIT'
     do {EMIT1(b1); EMIT(off, 4); } while (0)
                    ^
bpf_jit_comp.c:849:21: note: in expansion of macro 'EMIT1_off32'
                     EMIT1_off32(0xE8, jmp_offset); /* call */
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:873:21: note: in expansion of macro 'EMIT3_off32'
                     EMIT3_off32(0x48, 0x8B, 0x9D, -stacksize);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:66:28: note: in expansion of macro 'EMIT'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
                            ^
bpf_jit_comp.c:873:21: note: in expansion of macro 'EMIT3_off32'
                     EMIT3_off32(0x48, 0x8B, 0x9D, -stacksize);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:875:21: note: in expansion of macro 'EMIT3_off32'
                     EMIT3_off32(0x4C, 0x8B, 0xAD, -stacksize + 8);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:66:28: note: in expansion of macro 'EMIT'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
                            ^
bpf_jit_comp.c:875:21: note: in expansion of macro 'EMIT3_off32'
                     EMIT3_off32(0x4C, 0x8B, 0xAD, -stacksize + 8);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:877:21: note: in expansion of macro 'EMIT3_off32'
                     EMIT3_off32(0x4C, 0x8B, 0xB5, -stacksize + 16);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:66:28: note: in expansion of macro 'EMIT'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
                            ^
bpf_jit_comp.c:877:21: note: in expansion of macro 'EMIT3_off32'
                     EMIT3_off32(0x4C, 0x8B, 0xB5, -stacksize + 16);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:59:27: note: in expansion of macro 'EMIT'
 #define EMIT3(b1, b2, b3) EMIT((b1) + ((b2) << 8) + ((b3) << 16), 3)
                           ^
bpf_jit_comp.c:66:9: note: in expansion of macro 'EMIT3'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
         ^
bpf_jit_comp.c:879:21: note: in expansion of macro 'EMIT3_off32'
                     EMIT3_off32(0x4C, 0x8B, 0xBD, -stacksize + 24);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:66:28: note: in expansion of macro 'EMIT'
     do {EMIT3(b1, b2, b3); EMIT(off, 4); } while (0)
                            ^
bpf_jit_comp.c:879:21: note: in expansion of macro 'EMIT3_off32'
                     EMIT3_off32(0x4C, 0x8B, 0xBD, -stacksize + 24);
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:881:21: note: in expansion of macro 'EMIT1'
                     EMIT1(0xC9); /* leave */
                     ^
bpf_jit_comp.c:55:36: warning: assignment makes pointer from integer without a cast [enabled by default]
 #define EMIT(bytes, len) do { prog = emit_code(prog, bytes, len); } while (0)
                                    ^
bpf_jit_comp.c:57:20: note: in expansion of macro 'EMIT'
 #define EMIT1(b1)  EMIT(b1, 1)
                    ^
bpf_jit_comp.c:882:21: note: in expansion of macro 'EMIT1'
                     EMIT1(0xC3); /* ret */
                     ^
bpf_jit_comp.c:897:13: warning: implicit declaration of function 'unlikely' [-Wimplicit-function-declaration]
             if (unlikely(proglen + ilen > oldproglen)) {
             ^
bpf_jit_comp.c: At top level:
bpf_jit_comp.c:910:6: error: redefinition of 'bpf_jit_compile'
 void bpf_jit_compile(struct bpf_prog *prog)
      ^
In file included from bpf_jit_comp.c:27:0:
../include/filter.h:431:20: note: previous definition of 'bpf_jit_compile' was here
 static inline void bpf_jit_compile(struct bpf_prog *fp)
                    ^
bpf_jit_comp.c: In function 'bpf_int_jit_compile':
bpf_jit_comp.c:930:5: warning: implicit declaration of function 'kmalloc' [-Wimplicit-function-declaration]
     addrs = kmalloc(prog->len * sizeof(*addrs), GFP_KERNEL);
     ^
bpf_jit_comp.c:930:49: error: 'GFP_KERNEL' undeclared (first use in this function)
     addrs = kmalloc(prog->len * sizeof(*addrs), GFP_KERNEL);
                                                 ^
bpf_jit_comp.c:948:17: warning: implicit declaration of function 'bpf_jit_binary_free' [-Wimplicit-function-declaration]
                 bpf_jit_binary_free(header);
                 ^
bpf_jit_comp.c:958:13: warning: implicit declaration of function 'bpf_jit_binary_alloc' [-Wimplicit-function-declaration]
             header = bpf_jit_binary_alloc(proglen, &image,
             ^
bpf_jit_comp.c:958:20: warning: assignment makes pointer from integer without a cast [enabled by default]
             header = bpf_jit_binary_alloc(proglen, &image,
                    ^
bpf_jit_comp.c:967:9: warning: implicit declaration of function 'bpf_jit_dump' [-Wimplicit-function-declaration]
         bpf_jit_dump(prog->len, proglen, 0, image);
         ^
bpf_jit_comp.c:971:9: warning: implicit declaration of function 'set_memory_ro' [-Wimplicit-function-declaration]
         set_memory_ro((unsigned long)header, header->pages);
         ^
bpf_jit_comp.c:973:23: error: 'true' undeclared (first use in this function)
         prog->jited = true;
                       ^
bpf_jit_comp.c:976:5: warning: implicit declaration of function 'kfree' [-Wimplicit-function-declaration]
     kfree(addrs);
     ^
bpf_jit_comp.c: At top level:
bpf_jit_comp.c:979:6: error: redefinition of 'bpf_jit_free'
 void bpf_jit_free(struct bpf_prog *fp)
      ^
In file included from bpf_jit_comp.c:27:0:
../include/filter.h:435:20: note: previous definition of 'bpf_jit_free' was here
 static inline void bpf_jit_free(struct bpf_prog *fp)
                    ^
bpf_jit_comp.c: In function 'bpf_jit_free':
bpf_jit_comp.c:981:56: error: 'PAGE_MASK' undeclared (first use in this function)
     unsigned long addr = (unsigned long)fp->bpf_func & PAGE_MASK;
                                                        ^
bpf_jit_comp.c:987:5: warning: implicit declaration of function 'set_memory_rw' [-Wimplicit-function-declaration]
     set_memory_rw(addr, header->pages);
     ^
make[1]: *** [libebpf_la-bpf_jit_comp.lo] Error 1
make[1]: Leaving directory `/home/suchakra/Projects/repos/libebpf/src'
make: *** [all-recursive] Error 1
